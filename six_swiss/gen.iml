type order_type = Market | Limit | Quote

type order = {
  order_id: int;
  order_type: order_type;
  order_qty: int;
  order_price: real;
  order_time: int;
}

type order_book = {
  buys: order list;
  sells: order list;
}

let best_buy (ob: order_book) : order option =
  match ob.buys with
  | [] -> None
  | hd :: _ -> Some hd

let best_sell (ob: order_book) : order option =
  match ob.sells with
  | [] -> None
  | hd :: _ -> Some hd

let next_buy (ob: order_book) : order option =
  match ob.buys with
  | _ :: hd :: _ -> Some hd
  | _ -> None

let next_sell (ob: order_book) : order option =
  match ob.sells with
  | _ :: hd :: _ -> Some hd
  | _ -> None

let get_next_best_price (ob: order_book) (is_buy: bool) : real option =
  let next_order = if is_buy then next_buy ob else next_sell ob in
  match next_order with
  | Some order -> if order.order_type <> Market then Some order.order_price else None
  | None -> None

let determine_fill_price (b_bid: real option) (b_ask: real option) (ref_price: real) : real =
  match (b_bid, b_ask) with
  | (None, None) -> ref_price
  | (None, Some ask) -> if ask <. ref_price then ask else ref_price
  | (Some bid, None) -> if bid >. ref_price then bid else ref_price
  | (Some bid, Some ask) ->
      if bid >. ref_price then bid
      else if ask <. ref_price then ask
      else ref_price

let older_price (o1: order) (o2: order) : real =
  if o1.order_time > o2.order_time then o2.order_price else o1.order_price

let match_price (ob: order_book) (ref_price: real) : real option =
  let bb = best_buy ob in
  let bs = best_sell ob in
  match (bb, bs) with
  | (None, _) | (_, None) -> None
  | (Some bb, Some bs) ->
      let bb_type = bb.order_type in
      let bs_type = bs.order_type in
      match (bb_type, bs_type) with
      | (Limit, Limit) | (Quote, Quote) -> Some (older_price bb bs)
      | (Market, Market) ->
          if bb.order_qty <> bs.order_qty then None
          else
            let b_bid = get_next_best_price ob true in
            let b_ask = get_next_best_price ob false in
            Some (determine_fill_price b_bid b_ask ref_price)
      | (Market, Limit) -> Some bs.order_price
      | (Limit, Market) -> Some bb.order_price
      | (Quote, Limit) ->
          if bb.order_time > bs.order_time then
            if bb.order_qty < bs.order_qty then Some bs.order_price
            else if bb.order_qty = bs.order_qty then
              match next_sell ob with
              | Some next_sell -> Some next_sell.order_price
              | None -> Some bb.order_price
            else None
          else Some bb.order_price
      | (Quote, Market) ->
          if bb.order_time > bs.order_time then
            if bb.order_qty < bs.order_qty then Some bs.order_price
            else if bb.order_qty = bs.order_qty then
              match next_sell ob with
              | Some next_sell -> Some next_sell.order_price
              | None -> Some bb.order_price
            else None
          else Some bb.order_price
      | (Limit, Quote) ->
          if bb.order_time > bs.order_time then
            if bs.order_qty < bb.order_qty then Some bb.order_price
            else if bs.order_qty = bb.order_qty then
              match next_buy ob with
              | Some next_buy -> Some next_buy.order_price
              | None -> Some bs.order_price
            else None
          else Some bs.order_price
      | (Market, Quote) ->
          if bb.order_time > bs.order_time then
            if bs.order_qty < bb.order_qty then Some bs.order_price
            else if bb.order_qty = bs.order_qty then
              match next_buy ob with
              | Some next_buy -> Some next_buy.order_price
              | None -> Some bs.order_price
            else None
          else Some bs.order_price
      | _ -> None